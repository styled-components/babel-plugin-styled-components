import path from 'path'
import fs from 'fs'
import { sync as mkdirpSync } from 'mkdirp'

import minify from './visitors/minify'
import displayNameAndId from './visitors/displayNameAndId'
import templateLiterals from './visitors/templateLiterals'
import { noParserImportDeclaration, noParserRequireCallExpression } from './visitors/noParserImport'
import { isStyled } from './utils/detectors'
import getComponentId from './utils/componentId'
import { useStaticExtraction } from './utils/options'
import reduceMap from './utils/reduceMap'

export default function({ types: t }) {
  const styleSheet = new Map()

  let init = false
  let staticPath

  const pluginApi = {
    manipulateOptions(options) {
      const { plugins } = options

      const settings = plugins.filter(([ plugin ]) => (
        plugin.manipulateOptions === pluginApi.manipulateOptions
      ))[0][1]

      const extractStaticFile = useStaticExtraction({ opts: settings })
      staticPath = extractStaticFile && path.join(process.cwd(), extractStaticFile)

      return options
    },
    pre(state) {
      if (!init && staticPath) {
        mkdirpSync(path.dirname(staticPath))
        fs.appendFileSync(staticPath, '/* Generated by Styled Components babel plugin */\n', { encoding: 'utf8' })

        fs.writeFileSync(staticPath, '', { encoding: 'utf8' })
        init = true
      }
    },
    post() {
      if (staticPath) {
        const css = reduceMap(
          styleSheet,
          (acc, [ selector, rules ]) => {
            const partial = `${selector} {${rules.join(';')}}\n`
            return acc + partial
          },
          ''
        )

        fs.appendFileSync(staticPath, css, { encoding: 'utf8' })
      }
    },
    visitor: {
      ImportDeclaration(path, state) {
        noParserImportDeclaration(path, state)
      },
      CallExpression(path, state) {
        noParserRequireCallExpression(path, state)
      },
      TaggedTemplateExpression(path, state) {
        let componentId = undefined
        if (isStyled(path.node.tag, state)) {
          componentId = getComponentId(state)
        }

        minify(path, state)
        displayNameAndId(path, state, componentId)
        templateLiterals(path, state, componentId, styleSheet)
      }
    }
  }

  return pluginApi
}
